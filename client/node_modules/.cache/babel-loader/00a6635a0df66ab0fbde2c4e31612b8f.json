{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback, useState } from 'react';\nimport axios from \"axios\";\nexport const useHttp = () => {\n  _s();\n\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const request = useCallback(async (url, method = \"GET\", body = null, headers = {}) => {\n    setLoading(true);\n\n    try {\n      if (body) {\n        body = JSON.stringify(body);\n        headers['Content-Type'] = 'application/json';\n      }\n\n      let data;\n      let response;\n\n      if (method == 'GET') {\n        response = await axios.get(url, {\n          method\n        });\n        data = await response;\n        console.log('response', response);\n\n        if (!response.statusText) {\n          throw new Error(data.message || \"Что-то пошло не так\");\n        }\n      } else {\n        response = await fetch(url, {\n          method,\n          body,\n          headers\n        });\n        data = await response.json();\n        console.log('response', response);\n\n        if (!response.ok) {\n          throw new Error(data.message || \"Что-то пошло не так\");\n        }\n      }\n\n      setLoading(false);\n      return data;\n    } catch (e) {\n      setLoading(false);\n      setError(e.message);\n      throw e;\n    }\n  }, []);\n\n  const clearErrors = () => setError(null);\n\n  return {\n    loading,\n    request,\n    error,\n    clearErrors\n  };\n};\n\n_s(useHttp, \"MstwQpYZpw83DP6eQvw4fjC0Jxg=\");","map":{"version":3,"sources":["/Users/helloworld/Documents/marketFirst/market-place/client/src/hooks/http.hook.js"],"names":["useCallback","useState","axios","useHttp","loading","setLoading","error","setError","request","url","method","body","headers","JSON","stringify","data","response","get","console","log","statusText","Error","message","fetch","json","ok","e","clearErrors"],"mappings":";;AAAA,SAAQA,WAAR,EAAqBC,QAArB,QAAoC,OAApC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAO,MAAMC,OAAO,GAAG,MAAM;AAAA;;AAC3B,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBJ,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACK,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAC,IAAD,CAAlC;AAEA,QAAMO,OAAO,GAAGR,WAAW,CAAC,OAAOS,GAAP,EAAYC,MAAM,GAAG,KAArB,EAA4BC,IAAI,GAAG,IAAnC,EAAyCC,OAAO,GAAG,EAAnD,KAA0D;AACpFP,IAAAA,UAAU,CAAC,IAAD,CAAV;;AACA,QAAI;AAEF,UAAIM,IAAJ,EAAU;AACRA,QAAAA,IAAI,GAAGE,IAAI,CAACC,SAAL,CAAeH,IAAf,CAAP;AACAC,QAAAA,OAAO,CAAC,cAAD,CAAP,GAA0B,kBAA1B;AACD;;AAED,UAAIG,IAAJ;AACA,UAAIC,QAAJ;;AAEA,UAAIN,MAAM,IAAI,KAAd,EAAqB;AACnBM,QAAAA,QAAQ,GAAG,MAAMd,KAAK,CAACe,GAAN,CAAUR,GAAV,EAAe;AAACC,UAAAA;AAAD,SAAf,CAAjB;AACAK,QAAAA,IAAI,GAAG,MAAMC,QAAb;AACAE,QAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBH,QAAxB;;AACA,YAAI,CAACA,QAAQ,CAACI,UAAd,EAA0B;AACxB,gBAAM,IAAIC,KAAJ,CAAUN,IAAI,CAACO,OAAL,IAAgB,qBAA1B,CAAN;AACD;AACF,OAPD,MAOO;AACLN,QAAAA,QAAQ,GAAG,MAAMO,KAAK,CAACd,GAAD,EAAM;AAACC,UAAAA,MAAD;AAASC,UAAAA,IAAT;AAAeC,UAAAA;AAAf,SAAN,CAAtB;AACAG,QAAAA,IAAI,GAAG,MAAMC,QAAQ,CAACQ,IAAT,EAAb;AACAN,QAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBH,QAAxB;;AACA,YAAI,CAACA,QAAQ,CAACS,EAAd,EAAkB;AAChB,gBAAM,IAAIJ,KAAJ,CAAUN,IAAI,CAACO,OAAL,IAAgB,qBAA1B,CAAN;AACD;AACF;;AAEDjB,MAAAA,UAAU,CAAC,KAAD,CAAV;AACA,aAAOU,IAAP;AAED,KA7BD,CA6BE,OAAOW,CAAP,EAAU;AACVrB,MAAAA,UAAU,CAAC,KAAD,CAAV;AACAE,MAAAA,QAAQ,CAACmB,CAAC,CAACJ,OAAH,CAAR;AACA,YAAMI,CAAN;AACD;AACF,GApC0B,EAoCxB,EApCwB,CAA3B;;AAsCA,QAAMC,WAAW,GAAG,MAAMpB,QAAQ,CAAC,IAAD,CAAlC;;AAEA,SAAO;AAACH,IAAAA,OAAD;AAAUI,IAAAA,OAAV;AAAmBF,IAAAA,KAAnB;AAA0BqB,IAAAA;AAA1B,GAAP;AAED,CA9CM;;GAAMxB,O","sourcesContent":["import {useCallback, useState} from 'react'\nimport axios from \"axios\";\n\nexport const useHttp = () => {\n  const [loading, setLoading] = useState(false)\n  const [error, setError] = useState(null)\n\n  const request = useCallback(async (url, method = \"GET\", body = null, headers = {}) => {\n    setLoading(true)\n    try {\n\n      if (body) {\n        body = JSON.stringify(body)\n        headers['Content-Type'] = 'application/json'\n      }\n\n      let data\n      let response\n\n      if (method == 'GET') {\n        response = await axios.get(url, {method})\n        data = await response\n        console.log('response', response)\n        if (!response.statusText) {\n          throw new Error(data.message || \"Что-то пошло не так\")\n        }\n      } else {\n        response = await fetch(url, {method, body, headers})\n        data = await response.json()\n        console.log('response', response)\n        if (!response.ok) {\n          throw new Error(data.message || \"Что-то пошло не так\")\n        }\n      }\n\n      setLoading(false)\n      return data\n\n    } catch (e) {\n      setLoading(false)\n      setError(e.message)\n      throw e\n    }\n  }, [])\n\n  const clearErrors = () => setError(null)\n\n  return {loading, request, error, clearErrors}\n\n}"]},"metadata":{},"sourceType":"module"}